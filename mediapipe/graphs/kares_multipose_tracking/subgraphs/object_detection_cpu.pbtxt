# MediaPipe object detection subgraph.

type: "ObjectDetectionSubgraphCpu"

input_stream: "IMAGE:input_video"
output_stream: "DETECTIONS:output_detections"

# Transforms the input image on CPU to a 320x320 image. To scale the image, by
# default it uses the STRETCH scale mode that maps the entire input image to the
# entire transformed image. As a result, image aspect ratio may be changed and
# objects in the image may be deformed (stretched or squeezed), but the object
# detection model used in this graph is agnostic to that deformation.
node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE:input_video"
  output_stream: "IMAGE:transformed_input_video"
  node_options: {
    [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
      output_width: 320
      output_height: 320
    }
  }
}

# Converts the transformed input image on CPU into an image tensor stored as a
# TfLiteTensor.
node {
  calculator: "TfLiteConverterCalculator"
  input_stream: "IMAGE:transformed_input_video"
  output_stream: "TENSORS:image_tensor"
}

# Runs a TensorFlow Lite model on CPU that takes an image tensor and outputs a
# vector of tensors representing, for instance, detection boxes/keypoints and
# scores.
node {
  calculator: "TfLiteInferenceCalculator"
  input_stream: "TENSORS:image_tensor"
  output_stream: "TENSORS:detection_tensors"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteInferenceCalculatorOptions] {
      model_path: "mediapipe/models/ssdlite_object_detection.tflite"
      delegate { gpu {} }
    }
  }
}

# Generates a single side packet containing a vector of SSD anchors based on
# the specification in the options.
node {
  calculator: "SsdAnchorsCalculator"
  output_side_packet: "anchors"
  node_options: {
    [type.googleapis.com/mediapipe.SsdAnchorsCalculatorOptions] {
      num_layers: 6
      min_scale: 0.2
      max_scale: 0.95
      input_size_height: 320
      input_size_width: 320
      anchor_offset_x: 0.5
      anchor_offset_y: 0.5
      strides: 16
      strides: 32
      strides: 64
      strides: 128
      strides: 256
      strides: 512
      aspect_ratios: 1.0
      aspect_ratios: 2.0
      aspect_ratios: 0.5
      aspect_ratios: 3.0
      aspect_ratios: 0.3333
      reduce_boxes_in_lowest_layer: true
    }
  }
}

# Decodes the detection tensors generated by the TensorFlow Lite model, based on
# the SSD anchors and the specification in the options, into a vector of
# detections. Each detection describes a detected object.
node {
  calculator: "TfLiteTensorsToDetectionsCalculator"
  input_stream: "TENSORS:detection_tensors"
  input_side_packet: "ANCHORS:anchors"
  output_stream: "DETECTIONS:detections"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteTensorsToDetectionsCalculatorOptions] {
      num_classes: 91
      num_boxes: 2034
      num_coords: 4
      ignore_classes: 0
      sigmoid_score: true
      apply_exponential_on_box_size: true
      x_scale: 10.0
      y_scale: 10.0
      h_scale: 5.0
      w_scale: 5.0
      min_score_thresh: 0.65
    }
  }
}

# Performs non-max suppression to remove excessive detections.
node {
  calculator: "NonMaxSuppressionCalculator"
  input_stream: "detections"
  output_stream: "filtered_detections"
  node_options: {
    [type.googleapis.com/mediapipe.NonMaxSuppressionCalculatorOptions] {
      min_suppression_threshold: 0.4
      max_num_detections: 5
      overlap_type: INTERSECTION_OVER_UNION
      return_empty_detections: true
      algorithm: WEIGHTED
    }
  }
}

# Maps detection label IDs to the corresponding label text. The label map is
# provided in the label_map_path option.
node {
  calculator: "DetectionLabelIdToTextCalculator"
  input_stream: "filtered_detections"
  output_stream: "output_detections"
  node_options: {
    [type.googleapis.com/mediapipe.DetectionLabelIdToTextCalculatorOptions] {
      label_map_path: "mediapipe/models/ssdlite_object_detection_labelmap.txt"
    }
  }
}
# node: {
#   calculator: "ImageToTensorCalculator"
#   input_stream: "IMAGE:input_video"
#   output_stream: "TENSORS:input_tensors"
#   output_stream: "LETTERBOX_PADDING:letterbox_padding"
#   options: {
#     [mediapipe.ImageToTensorCalculatorOptions.ext] {
#       output_tensor_width: 224
#       output_tensor_height: 224
#       keep_aspect_ratio: true
#       output_tensor_float_range {
#         min: -1.0
#         max: 1.0
#       }
#       border_mode: BORDER_ZERO
#       # If this calculator truly operates in the CPU, then gpu_origin is
#       # ignored, but if some build switch insists on GPU inference, then we will
#       # still need to set this.
#       gpu_origin: TOP_LEFT
#     }
#   }
# }

# # Runs a TensorFlow Lite model on CPU that takes an image tensor and outputs a
# # vector of tensors representing, for instance, detection boxes/keypoints and
# # scores.
# node {
#   calculator: "InferenceCalculator"
#   input_stream: "TENSORS:input_tensors"
#   output_stream: "TENSORS:detection_tensors"
#   options: {
#     [mediapipe.InferenceCalculatorOptions.ext] {
#       model_path: "mediapipe/modules/pose_detection/pose_detection.tflite"
#       delegate {
#         xnnpack {}
#       }
#     }
#   }
# }

# # Generates a single side packet containing a vector of SSD anchors based on
# # the specification in the options.
# node {
#   calculator: "SsdAnchorsCalculator"
#   output_side_packet: "anchors"
#   options: {
#     [mediapipe.SsdAnchorsCalculatorOptions.ext] {
#       num_layers: 5
#       min_scale: 0.1484375
#       max_scale: 0.75
#       input_size_height: 224
#       input_size_width: 224
#       anchor_offset_x: 0.5
#       anchor_offset_y: 0.5
#       strides: 8
#       strides: 16
#       strides: 32
#       strides: 32
#       strides: 32
#       aspect_ratios: 1.0
#       fixed_anchor_size: true
#     }
#   }
# }

# # Decodes the detection tensors generated by the TensorFlow Lite model, based on
# # the SSD anchors and the specification in the options, into a vector of
# # detections. Each detection describes a detected object.
# node {
#   calculator: "TensorsToDetectionsCalculator"
#   input_stream: "TENSORS:detection_tensors"
#   input_side_packet: "ANCHORS:anchors"
#   output_stream: "DETECTIONS:unfiltered_detections"
#   options: {
#     [mediapipe.TensorsToDetectionsCalculatorOptions.ext] {
#       num_classes: 1
#       num_boxes: 2254
#       num_coords: 12
#       box_coord_offset: 0
#       keypoint_coord_offset: 4
#       num_keypoints: 4
#       num_values_per_keypoint: 2
#       sigmoid_score: true
#       score_clipping_thresh: 100.0
#       reverse_output_order: true
#       x_scale: 224.0
#       y_scale: 224.0
#       h_scale: 224.0
#       w_scale: 224.0
#       min_score_thresh: 0.5
#     }
#   }
# }

# # Performs non-max suppression to remove excessive detections.
# node {
#   calculator: "NonMaxSuppressionCalculator"
#   input_stream: "unfiltered_detections"
#   output_stream: "filtered_detections"
#   options: {
#     [mediapipe.NonMaxSuppressionCalculatorOptions.ext] {
#       min_suppression_threshold: 1.0
#       overlap_type: INTERSECTION_OVER_UNION
#       algorithm: WEIGHTED
#     }
#   }
# }

# # Adjusts detection locations (already normalized to [0.f, 1.f]) on the
# # letterboxed image (after image transformation with the FIT scale mode) to the
# # corresponding locations on the same image with the letterbox removed (the
# # input image to the graph before image transformation).
# node {
#   calculator: "DetectionLetterboxRemovalCalculator"
#   input_stream: "DETECTIONS:filtered_detections"
#   input_stream: "LETTERBOX_PADDING:letterbox_padding"
#   output_stream: "DETECTIONS:output_detections"
# }